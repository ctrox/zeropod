// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: node.proto
package v1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type NodeService interface {
	Evac(context.Context, *EvacRequest) (*EvacResponse, error)
	PrepareEvac(context.Context, *EvacRequest) (*EvacResponse, error)
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	FinishRestore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	NewCriuLazyPages(context.Context, *CriuLazyPagesRequest) (*emptypb.Empty, error)
	PullImage(context.Context, *PullImageRequest, Node_PullImageServer) error
}

type Node_PullImageServer interface {
	Send(*Image) error
	ttrpc.StreamServer
}

type nodePullImageServer struct {
	ttrpc.StreamServer
}

func (x *nodePullImageServer) Send(m *Image) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterNodeService(srv *ttrpc.Server, svc NodeService) {
	srv.RegisterService("zeropod.node.v1.Node", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Evac": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req EvacRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Evac(ctx, &req)
			},
			"PrepareEvac": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req EvacRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PrepareEvac(ctx, &req)
			},
			"Restore": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RestoreRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Restore(ctx, &req)
			},
			"FinishRestore": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RestoreRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.FinishRestore(ctx, &req)
			},
			"NewCriuLazyPages": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req CriuLazyPagesRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.NewCriuLazyPages(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"PullImage": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(PullImageRequest)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.PullImage(ctx, m, &nodePullImageServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type NodeClient interface {
	Evac(context.Context, *EvacRequest) (*EvacResponse, error)
	PrepareEvac(context.Context, *EvacRequest) (*EvacResponse, error)
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	FinishRestore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	NewCriuLazyPages(context.Context, *CriuLazyPagesRequest) (*emptypb.Empty, error)
	PullImage(context.Context, *PullImageRequest) (Node_PullImageClient, error)
}

type nodeClient struct {
	client *ttrpc.Client
}

func NewNodeClient(client *ttrpc.Client) NodeClient {
	return &nodeClient{
		client: client,
	}
}

func (c *nodeClient) Evac(ctx context.Context, req *EvacRequest) (*EvacResponse, error) {
	var resp EvacResponse
	if err := c.client.Call(ctx, "zeropod.node.v1.Node", "Evac", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *nodeClient) PrepareEvac(ctx context.Context, req *EvacRequest) (*EvacResponse, error) {
	var resp EvacResponse
	if err := c.client.Call(ctx, "zeropod.node.v1.Node", "PrepareEvac", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *nodeClient) Restore(ctx context.Context, req *RestoreRequest) (*RestoreResponse, error) {
	var resp RestoreResponse
	if err := c.client.Call(ctx, "zeropod.node.v1.Node", "Restore", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *nodeClient) FinishRestore(ctx context.Context, req *RestoreRequest) (*RestoreResponse, error) {
	var resp RestoreResponse
	if err := c.client.Call(ctx, "zeropod.node.v1.Node", "FinishRestore", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *nodeClient) NewCriuLazyPages(ctx context.Context, req *CriuLazyPagesRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "zeropod.node.v1.Node", "NewCriuLazyPages", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *nodeClient) PullImage(ctx context.Context, req *PullImageRequest) (Node_PullImageClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "zeropod.node.v1.Node", "PullImage", req)
	if err != nil {
		return nil, err
	}
	x := &nodePullImageClient{stream}
	return x, nil
}

type Node_PullImageClient interface {
	Recv() (*Image, error)
	ttrpc.ClientStream
}

type nodePullImageClient struct {
	ttrpc.ClientStream
}

func (x *nodePullImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
